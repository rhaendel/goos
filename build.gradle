
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply from: 'gradle/extraTestSourceSets.gradle'

repositories {
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

tasks.coveralls {
  dependsOn 'build'
}

dependencies {
    compile 'org.igniterealtime.smack:smack:3.2.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile ('com.googlecode.windowlicker:windowlicker-swing:r268') {
        exclude module: 'hamcrest-all'
    }
    testCompile 'org.igniterealtime.smack:smackx:3.2.1'
    testCompile 'org.jmock:jmock:2.6.0'
    testCompile 'org.jmock:jmock-junit4:2.6.0'
}

task ensureSourceFoldersExist() {
    doLast {
        def allSourceDirs = sourceSets.collect{ it.allSource.srcDirs }.flatten()
        allSourceDirs.findAll{ !it.exists() }.each { missingSrcDir ->
            println "creating $missingSrcDir"
            missingSrcDir.mkdirs()
        }
    }
}
eclipseClasspath.dependsOn ensureSourceFoldersExist

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    executionData += files("${buildDir}/jacoco/endtoendTest.exec")
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}
