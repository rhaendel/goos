sourceSets {
    endtoendTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.endtoendTest.output
    }
    endtoendFailingTest {
        compileClasspath += sourceSets.endtoendTest.output
        runtimeClasspath += sourceSets.endtoendTest.output
        runtimeClasspath += sourceSets.endtoendFailingTest.output
    }
}

dependencies {
    endtoendTestCompile configurations.testCompile
    endtoendTestRuntime configurations.testRuntime
    endtoendFailingTestCompile configurations.endtoendTestCompile
    endtoendFailingTestRuntime configurations.endtoendTestRuntime
}

task endtoendTest(type: Test) {
    testClassesDir = sourceSets.endtoendTest.output.classesDir
    classpath = sourceSets.endtoendTest.runtimeClasspath
    mustRunAfter test
    reports.html.destination = file("$buildDir/reports/endtoendTest")
}

task endtoendFailingTest(type: Test) {
    testClassesDir = sourceSets.endtoendFailingTest.output.classesDir
    classpath = sourceSets.endtoendFailingTest.runtimeClasspath
    mustRunAfter endtoendTest
    reports.html.destination = file("$buildDir/reports/endtoendFailingTest")
}

check.dependsOn endtoendTest
check.dependsOn endtoendFailingTestClasses

//
// eclipse plugin needs some extra configuration:
//
configurations{
    projectInternalDependencies
}

dependencies {
    projectInternalDependencies sourceSets.main.output
}

eclipse {
    classpath {
        plusConfigurations += [ configurations.endtoendFailingTestCompile, configurations.endtoendFailingTestRuntime ]
        minusConfigurations += [ configurations.projectInternalDependencies ]
    }
}
